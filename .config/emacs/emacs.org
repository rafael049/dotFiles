#+title Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* Emacs Startup
#+begin_src emacs-lisp
(setq inhibit-startup-message t)  ; Disable startup page
(setq gc-cons-threshold 100000000) ; Set when GC is called (100MB)
#+end_src

* Setup Melpa
  
   #+begin_src emacs-lisp
     (require 'package)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")
			      ("elpa" . "https://elpa.gnu.org/packages/")
			      ("gnu" . "http://elpa.gnu.org/packages/")))
     (package-initialize)
     (unless package-archive-contents
				(package-refresh-contents))

     (unless (package-installed-p 'use-package)
				(package-install 'use-package))
			 
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+end_src

* Visuals
** Remove Gui Elements

#+begin_src emacs-lisp
(scroll-bar-mode -1)   ; Disable scrollbar
(tool-bar-mode -1)     ; Disable toolbar
(tooltip-mode -1)      ; Disable tooltips
(set-fringe-mode 10)   ; Give some breathing room
(menu-bar-mode -1)     ; Disable the menu bar
#+end_src

** Font

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Roboto Mono-11"))
#+end_src

** Line numering

 #+begin_src emacs-lisp
   ;; Disable line numbers in some modes
   (dolist (mode '(org-mode-hook
		   dired-mode-hook
		   term-mode-hook
		   eww-mode-hook
		   pdf-view-mode-hook
		   eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

   ;; Line numbers
   (global-display-line-numbers-mode t)
   (setq global-display-line-numbers 'relative)
   (set-default 'display-line-numbers 'relative)

 #+end_src

#+RESULTS:
: ((font . Roboto Mono-11) (vertical-scroll-bars) (left-fringe . 10) (right-fringe . 10))

** Theme
   #+begin_src emacs-lisp
     (use-package doom-themes
     :init (load-theme 'doom-palenight t)
     :config
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	   doom-themes-enable-italic t)) ; if nil, italics is universally disabled

   #+end_src
** Status Bar
#+begin_src emacs-lisp
(use-package smart-mode-line)
#+end_src
** Mode line
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Rafael Moraes"
      user-mail-address "rafael1.618@outlook.com")
#+end_src
* Emacs Keybings
#+begin_src emacs-lisp
; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-j"))

#+end_src

* Config Org Mode
** General
  #+begin_src emacs-lisp
   (setq org-confirm-babel-evaluate nil)
  #+end_src
** Font Setup
   #+begin_src emacs-lisp
     (defun my/org-font-setup ()
     ;; Replace list hyphen with dot
     (font-lock-add-keywords 'org-mode
			     '(("^ *\\([-]\\) "
				(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

     ;; Set faces for heading levels
     (dolist (face '((org-level-1 . 1.5)
		     (org-level-2 . 1.3)
		     (org-level-3 . 1.15)
		     (org-level-4 . 1.1)
		     (org-level-5 . 1.1)
		     (org-level-6 . 1.1)
		     (org-level-7 . 1.1)
		     (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil :font "Liberation Serif" :weight 'regular :height (cdr face)))
     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

   #+end_src
** Setup

A function to organize org-mode setup.
   #+begin_src emacs-lisp
     (defun my/org-mode-setup ()
     (org-indent-mode)
     (variable-pitch-mode 1)
     (visual-line-mode 1)
     (setq org-file-apps '(("\\.pdf\\'" . emacs)) ) )
   #+end_src

   #+begin_src emacs-lisp
     (use-package org
       :hook (org-mode . my/org-mode-setup)
       :config
       (setq org-latex-pdf-process (list
				    "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
       (add-to-list 'org-latex-packages-alist
		    '("AUTO" "babel" t ("pdflatex")))
       (setq org-ellipsis " ⯆"
	     org-hide-emphasis-markers t)
       (my/org-font-setup))

     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

   #+end_src

*** Centering page in Org-mode
    #+begin_src emacs-lisp
      (defun efs/org-mode-visual-fill ()
	(setq visual-fill-column-width 100
	      visual-fill-column-center-text t)
	(visual-fill-column-mode 1))

      (use-package visual-fill-column
	:hook (org-mode . efs/org-mode-visual-fill))
    #+end_src

*** Org-mode Bullets
    #+begin_src emacs-lisp
       (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
    #+end_src
** Structure Templates

   #+begin_src emacs-lisp
   (require 'org-tempo)

   (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
   (add-to-list 'org-structure-template-alist '("py" . "src python"))
   #+end_src

** Auto-tangle Configuration Files

   #+begin_src emacs-lisp
     (defun my/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
			   (expand-file-name "~/.config/emacs/emacs.org"))
	 (let ((org-confirm-babel-evaluate nil))
	   (org-babel-tangle))))
     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))

   #+end_src

** Code Evaluation

   #+begin_src emacs-lisp
     ;; Enable code evaluation on Org-mode
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . nil)
	(python . t)))

   #+end_src

** Latex Export
   #+begin_src emacs-lisp
     ;; Syntax highlight in org-mode latex exported
     (setq org-latex-listings 'minted
	   org-latex-packages-alist '(("" "minted"))
	   org-latex-pdf-process
	   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+end_src
* Text Editing
** Line Behavior
#+begin_src emacs-lisp
  ;; Disable line breaks
  (dolist (mode '(prog-mode-hook
                  ))
    (add-hook mode (lambda () (auto-fill-mode 0))))
  ;; Disable line wraping
  (set-default 'truncate-lines t)

  ;; Enable auto-fill-mode in text files
  (setq text-mode-hook 'turn-on-auto-fill)

#+end_src

** Tabs
#+begin_src emacs-lisp
  ;; Spaces as tabs
  (setq indent-tabs-mode nil)

#+end_src
** Spelling
#+begin_src emacs-lisp
  ;; Configure Spelling
  (cond
   ;; try hunspell at first
    ;; if hunspell does NOT exist, use aspell
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary "pt_BR")
    (setq ispell-local-dictionary-alist
          ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
          ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
          '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))

   ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
#+end_src
* Search and Completion
** Counsel
  #+begin_src emacs-lisp
  (use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))
  #+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package ivy)
  (ivy-mode 1)  ; Activate ivy
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
#+end_src
* Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump t)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "C-s") 'evil-write)
    (define-key evil-normal-state-map (kbd "C-q") 'kill-current-buffer)
    (define-key evil-normal-state-map (kbd "g l") 'next-buffer)
    (define-key evil-normal-state-map (kbd "g h") 'previous-buffer)
    (define-key evil-normal-state-map (kbd "g b") 'counsel-ibuffer)
    (define-key evil-insert-state-map (kbd "C-j") 'newline))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+end_src
* Simple Tweks
** Save backup files in /tmp
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Anwer with 'y' or 'n'
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* Help

** Which-Key
   #+begin_src emacs-lisp
     (use-package which-key
     :init (which-key-mode)
     :diminish which-key-mode
     :config
     (setq which-key-idle-delay 0.3))

   #+end_src

** Helpfulj
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src
* Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-find-file))

(use-package dired-single)
#+end_src
